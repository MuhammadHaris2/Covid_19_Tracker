{"version":3,"sources":["helper.js","InfoBox.js","MapsCom.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["casesTypeColors","cases","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","color","fillColor","fillOpacity","radius","Math","sqrt","Popup","className","style","backgroundImage","flag","InfoBox","title","total","active","isRed","props","Card","onClick","CardContent","Typography","MapsCom","countries","zoom","ChangeView","useMap","setView","MapContainer","TileLayer","url","attribution","Table","x","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4aa6f9f3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        rgb: \"rgb(204, 16, 52)\",\r\n        half_op: \"rgba(204, 16, 52, 0.5)\",\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        rgb: \"rgb(125, 215, 29)\",\r\n        half_op: \"rgba(125, 215, 29, 0.5)\",\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        rgb: \"rgb(251, 68, 67)\",\r\n        half_op: \"rgba(251, 68, 67, 0.5)\",\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n    // sortedData.sort((a,b)=>{\r\n    //     if(a.cases>b.cases){\r\n    //         return -1;\r\n    //     }else{\r\n    //         return 1;\r\n    //     }\r\n    // });\r\n    // return sortedData;\r\n}\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\n{/* <Marker position={position}>\r\n<Popup>\r\n  A pretty CSS3 popup. <br /> Easily customizable.\r\n</Popup>\r\n</Marker> */}\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n    data.map((country) => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            color={casesTypeColors[casesType].hex}\r\n            fillColor={casesTypeColors[casesType].hex}\r\n            fillOpacity={0.4}\r\n            radius={\r\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div\r\n                        className=\"info-flag\"\r\n                        style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                    ></div>\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">\r\n                        Cases: {numeral(country.cases).format(\"0,0\")}\r\n                    </div>\r\n                    <div className=\"info-recovered\">\r\n                        Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n                    </div>\r\n                    <div className=\"info-deaths\">\r\n                        Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n                    </div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ))\r\n","import { Card, CardContent, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport \"./InfoBox.css\"\r\n\r\nconst InfoBox = ({title,cases,total, active,isRed,...props}) => {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${\r\n            isRed && \"infoBox--red\"\r\n          }`}>\r\n        <CardContent>\r\n            <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                {title}\r\n            </Typography>\r\n            <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n            <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                {total} Total\r\n            </Typography>\r\n        </CardContent>\r\n\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from 'react';\r\nimport { MapContainer, TileLayer, useMap } from \"react-leaflet\";\r\nimport { showDataOnMap } from './helper';\r\n//  import { Map as LeafletMap, TileLayer } from \"leaflet\";\r\nimport './MapsCom.css'\r\n\r\n\r\n\r\nconst MapsCom = ({countries,casesType, center, zoom }) => {\r\n\r\n    function ChangeView({ center, zoom }) {\r\n        const map = useMap();\r\n        map.setView(center, zoom);\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"map\">\r\n\r\n            <MapContainer center={center} zoom={zoom}>\r\n\r\n\r\n                <ChangeView center={center} zoom={zoom} />\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' />\r\n                {showDataOnMap(countries,casesType)}\r\n            </MapContainer>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MapsCom;\r\n","import numeral from 'numeral';\r\nimport React from 'react';\r\nimport './Table.css';\r\n\r\nconst Table = ({countries}) => {\r\n    // console.log(\"countries\",countries)\r\n    return (\r\n        <div className=\"table\">\r\n        {\r\n            countries.map(x=>(\r\n                <tr key={x.country}>\r\n                    <td>{x.country}</td>\r\n                    <td><strong>{numeral(x.cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n            ))\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import numeral from 'numeral';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0.0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    // Include a dollar sign in the ticks\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\n\r\nconst buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data[casesType]) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\nconst LineGraph = ({ casesType = \"cases\",...props }) => {\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch('https://corona.lmao.ninja/v3/covid-19/historical/all?lastdays=120')\r\n                .then((response) => response.json())\r\n                .then(data => {\r\n                    // datt in chart should be x and y\r\n                    const chartData = buildChartData(data, casesType);\r\n                    setData(chartData);\r\n                })\r\n        }\r\n        fetchData()\r\n\r\n    }, [casesType]);\r\n\r\n\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n                <Line\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                                borderColor: \"#CC1034\",\r\n                                data: data,\r\n                            },\r\n                        ],\r\n                    }}\r\n                    options={options}\r\n                />\r\n            )}\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import { Card, CardContent, FormControl, MenuItem, Select } from '@material-ui/core';\n// import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport { prettyPrintStat, sortData } from './helper';\nimport InfoBox from './InfoBox';\nimport MapsCom from './MapsCom';\nimport Table from './Table';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\"); //set by default value in dropdown\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n\n  useEffect(()=>{\n     fetch(\"https://corona.lmao.ninja/v3/covid-19/all\")\n    .then((response) => response.json())\n    .then((data) => {\n      setCountryInfo(data)\n    });\n  },[])\n  useEffect(() => {\n    const getCountriesData = async () => {\n      // const response = await axios.get(\"https://corona.lmao.ninja/v3/covid-19/countries\");\n      // const countries = response.data.map((x)=>(\n      //         {\n      //           name:x.country,\n      //           value:x.countryInfo.iso2\n      //         }));\n\n      //         setCountries(countries)\n\n      await fetch(\"https://corona.lmao.ninja/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((x) => (\n            {\n              name: x.country,\n              value: x.countryInfo.iso2\n            }));\n          const sortedData = sortData(data);   //helper mmethod sort data for table\n          setCountries(countries);\n          setTableData(sortedData);\n          setMapCountries(data);\n          \n        });\n\n      // return () => {\n      //   cleanup\n    }\n    getCountriesData()\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n    \n    const url = countryCode==='worldwide'?\"https://corona.lmao.ninja/v3/covid-19/all\":`https://corona.lmao.ninja/v3/covid-19/countries/${countryCode}`\n        await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n        countryCode === \"worldwide\"\n        ? setMapCenter([34.80746, -40.4796])\n        : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n\n   \n\n  }\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID_19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n              <MenuItem value=\"worldwide\">World Wide</MenuItem>\n              {\n                countries.map(x => (\n                  <MenuItem  value={x.value}>{x.name}</MenuItem>\n                ))\n              }\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox onClick={(e)=>setCasesType(\"cases\")} active={casesType===\"cases\"} isRed title=\"Corona Virus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)} />\n          <InfoBox onClick={(e)=>setCasesType(\"recovered\")} active={casesType===\"recovered\"} title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)} />\n          <InfoBox onClick={(e)=>setCasesType(\"deaths\")} active={casesType===\"deaths\"} isRed title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)} />\n        </div>\n\n        <MapsCom countries={mapCountries}center={mapCenter} zoom={mapZoom} casesType={casesType} />\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by country</h3>\n          <Table countries={tableData}/>\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType} </h3>\n          <LineGraph className=\"app__graph\" casesType={casesType}/>\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}